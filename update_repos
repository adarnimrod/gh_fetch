#!/usr/bin/python
# encoding: utf-8

import sys
import os
from subprocess import Popen, PIPE

from urllib2 import urlopen
import json

DEBUG = False
NO_FORKS = False
NO_ORG_FORKS = True

WHITELIST=[]
BLACKLIST=[]

ACCESS_TOKEN_PARAM = 'access_token=%s'
GITHUB_API_HOST = 'https://api.github.com'

GIT_CLONE_CMD = 'git clone https://%s@github.com/%s'
GIT_LOG_CMD = 'git log origin/{0} -1 --format=%H'
GIT_FETCH_CMD = 'git fetch'

USER_DETAILS_PATH = '/users/%s'

COLOR_BOLD_GREEN = "\033[1;32m"
COLOR_BOLD_BLUE = "\033[1;34m"
COLOR_BOLD_YELLOW = "\033[1;33m"
COLOR_END = "\033[0m"

class AttributeDict(dict):
    def __getattr__(self, attr):
        return self[attr]

class RepoUpdater(object):
    def __init__(self, username, token):
        self.username = username
        self.auth_token = token

    def update(self):
        print "Updating repos from", COLOR_BOLD_GREEN + username, COLOR_END
        user_data = self.get_user_data()

        repos = self.get_repos(user_data.repos_url, user_data.organizations_url)
        repos = self.filter_repo_names(repos)
        for repo in repos:
            print COLOR_BOLD_YELLOW + '{:-^60}'.format(repo.name) + COLOR_END
            self.update_repo(repo.url)

    def get_json(self, uri):
        uri += '?' + ACCESS_TOKEN_PARAM % self.auth_token

        if DEBUG:
            print "Trying:", uri

        return json.loads(urlopen(uri).read(), object_hook=AttributeDict)

    def get_user_data(self):
        return self.get_json(GITHUB_API_HOST + USER_DETAILS_PATH % self.username)

    def get_repos(self, repos_url, orgs_url):
        if DEBUG:
            print "Getting repo data from", COLOR_BOLD_GREEN, repos_url, COLOR_END

        repos = self.get_json(repos_url)
        if NO_FORKS:
            repos = [repo for repo in repos if not repo.fork]

        orgs = self.get_json(orgs_url)
        for org in orgs:
            org_repos = self.get_json(org.repos_url)

            priv_org_repos = [repo for repo in org_repos if repo.private]
            if NO_ORG_FORKS:
                priv_org_repos = [repo for repo in priv_org_repos if not repo.fork]

            repos += priv_org_repos

        if DEBUG:
            print "Available repos:", COLOR_BOLD_GREEN + str(len(repos)), COLOR_END
            for repo in repos:
                owner = repo.owner.login
                print " -", COLOR_BOLD_YELLOW + repo.name, COLOR_END
                print " " * 5, repo.description


        return repos

    def filter_repo_names(self, repos):
        original_repos = len(repos)

        if BLACKLIST:
            repos = [repo for repo in repos if not repo.name in BLACKLIST]

        if WHITELIST:
            repos = [repo for repo in repos if repo.name in WHITELIST]

        filtered_repos = original_repos - len(repos)

        filtered_repos_str = "(" + str(filtered_repos), "filtered)"
        repo_count_str = str(original_repos - filtered_repos) + " / " + str(original_repos)
        print "Fetching repos:", COLOR_BOLD_GREEN + repo_count_str, filtered_repos_str, COLOR_END

        for repo in repos:
            owner = repo.owner.login
            print " -", COLOR_BOLD_YELLOW + repo.name, COLOR_END
            print " " * 5, repo.description

        return repos

    def try_clone(self, working_directory, repo_data):
        target_directory = os.path.join(working_directory, repo_data.name)

        print "Using", target_directory
        if os.path.isdir(target_directory):
            return False

        print "Need to clone", repo_data.name
        self.system_exec(GIT_CLONE_CMD % (self.auth_token, repo_data.full_name))

        print "Finished cloning"
        return True

    def get_sha_str(self, branch, directory):
        sha=self.system_exec(GIT_LOG_CMD.format(branch), directory, False)
        return COLOR_BOLD_GREEN + sha[:7] + COLOR_END

    def print_start_sha(self, branch, directory):
        print("- "+ COLOR_BOLD_GREEN + branch + COLOR_END+ " @ "+ self.get_sha_str(branch, directory)+ ' ..'),

    def update_repo(self, repo_url):
        repo_data = self.get_json(repo_url)

        working_directory = self.system_exec('pwd', None, False)
        if self.try_clone(working_directory, repo_data):
            return

        target_directory = os.path.join(working_directory, repo_data.name)

        self.print_start_sha(repo_data.default_branch, target_directory)
        self.system_exec(GIT_FETCH_CMD, target_directory, False)
        print self.get_sha_str(repo_data.default_branch, target_directory)

    def system_exec(self, command, directory=None, show_output=True):
        try:
            if directory:
                p = Popen(command, stdout=PIPE, stderr=PIPE, shell=True, cwd=directory)
            else:
                p = Popen(command, stdout=PIPE, stderr=PIPE, shell=True)

            (output, error) = p.communicate()

            if show_output:
                print output.strip()
                sys.stdout.flush()

            if p.returncode != 0:
                raise Exception(error)
            return output.strip()
        except Exception as e:
            print COLOR_BOLD_RED + "Could not execute", command, e, COLOR_END
            print "Terminating early"
            exit(1)

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print "No argument provided. Exiting."
        print "Usage: %s <username> <github token>" % sys.argv[0]
        exit(1)

    username = sys.argv[1]
    token = sys.argv[2]

    RepoUpdater(username, token).update()
