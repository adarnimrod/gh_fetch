#!/usr/bin/python
# encoding: utf-8

import sys
import os
import argparse
from subprocess import Popen, PIPE

from urllib2 import urlopen
import json

WHITELIST=[]
BLACKLIST=[]

ACCESS_TOKEN_PARAM = '?access_token=%s'
LISTING_FIX_PARAM = '&per_page=150'
GITHUB_API_HOST = 'https://api.github.com'

GIT_CLONE_CMD = 'git clone https://%s@github.com/%s'
GIT_LOG_CMD = 'git log origin/{0} -1 --format=%H'
GIT_FETCH_CMD = 'git fetch'

USER_DETAILS_PATH = '/users/%s'

class Color:
    GREEN = "\033[1;32m"
    BLUE = "\033[1;34m"
    YELLOW = "\033[1;33m"
    RED = "\033[1;31m"
    END = "\033[0m"

class AttributeDict(dict):
    def __getattr__(self, attr):
        return self[attr]

class RepoUpdater(object):
    def __init__(self, args):
        self.username = args.username
        self.auth_token = args.token
        self.cwd = args.directory if args.directory else os.getcwd()

        self.debug = args.debug
        self.exclude_orgs = args.exclude_orgs
        self.include_org_forks = args.include_org_forks
        self.include_public_org_repos = args.include_public_org_repos
        self.exclude_forks = args.exclude_forks
        self.exclude_own = args.exclude_own

        if self.debug:
            # We don't want this printed
            del args['token']
            print "Current configuration: "
            for arg in args:
                print arg, ":", self.get_color_str(args[arg], Color.GREEN)

    def update(self):
        print "User:", self.get_color_str(self.username, Color.GREEN)
        user_data = self.get_user_data()

        repos = self.get_repos(user_data.repos_url, user_data.organizations_url)
        repos = self.filter_repo_names(repos)
        for repo in repos:
            print self.get_color_str('{:-^60}'.format(repo.name), Color.YELLOW)
            self.update_repo(repo.url)

    def get_json(self, uri):
        uri += ACCESS_TOKEN_PARAM % self.auth_token + LISTING_FIX_PARAM

        if self.debug:
            print "Trying:", uri

        return json.loads(urlopen(uri).read(), object_hook=AttributeDict)

    def get_user_data(self):
        return self.get_json(GITHUB_API_HOST + USER_DETAILS_PATH % self.username)

    def get_own_repos(self, repos_url):
        repos = self.get_json(repos_url)
        if self.exclude_forks:
            repos = [repo for repo in repos if not repo.fork]

        return repos

    def get_org_repos(self, orgs_url):
        all_orgs_repos = []
        orgs = self.get_json(orgs_url)
        for org in orgs:
            org_repos = self.get_json(org.repos_url)

            if not self.include_public_org_repos:
                org_repos = [repo for repo in org_repos if repo.private]
            if not self.include_org_forks:
                org_repos = [repo for repo in org_repos if not repo.fork]

            all_orgs_repos += org_repos

        return all_orgs_repos


    def get_repos(self, repos_url, orgs_url):
        repos = []
        if self.debug:
            print "Getting repo data from", get_color_str(repos_url, Color.GREEN)

        if not self.exclude_own:
            repos += self.get_own_repos(repos_url)

        if not self.exclude_orgs:
            repos += self.get_org_repos(orgs_url)

        if self.debug:
            print "Available repos:", self.get_color_str(str(len(repos)), Color.GREEN)
            for repo in repos:
                owner = repo.owner.login
                print " -", this.get_color_str(repo.name, Color.YELLOW)
                print " " * 5, repo.description


        return repos

    def filter_repo_names(self, repos):
        original_repos = len(repos)

        if BLACKLIST:
            repos = [repo for repo in repos if not repo.name in BLACKLIST]

        if WHITELIST:
            repos = [repo for repo in repos if repo.name in WHITELIST]

        filtered_repos = original_repos - len(repos)

        filtered_repos_str = " (" + str(filtered_repos) + " filtered)"
        repo_count_str = str(original_repos - filtered_repos) + " / " + str(original_repos)
        print "Fetching repos:", self.get_color_str(repo_count_str + filtered_repos_str, Color.GREEN)

        for repo in repos:
            owner = repo.owner.login
            print " -", Color.YELLOW + repo.name, Color.END
            print " " * 5, repo.description

        return repos

    def try_clone(self, repo_data, target_directory):
        print "Using", target_directory
        if os.path.isdir(target_directory):
            return False

        print "Need to clone", repo_data.name
        self.system_exec(GIT_CLONE_CMD % (self.auth_token, repo_data.full_name))

        print "Finished cloning"
        return True

    def get_sha_str(self, branch, directory):
        sha=self.system_exec(GIT_LOG_CMD.format(branch), directory, False)
        return self.get_color_str(sha[:7], Color.GREEN)

    def print_start_sha(self, branch, directory):
        print("- " + self.get_color_str(branch, Color.GREEN) + " @ " \
                + self.get_sha_str(branch, directory) + ' ..'),

    def update_repo(self, repo_url):
        repo_data = self.get_json(repo_url)
        target_directory = os.path.join(self.cwd, repo_data.name)

        if self.try_clone(repo_data, target_directory):
            return

        self.print_start_sha(repo_data.default_branch, target_directory)
        self.system_exec(GIT_FETCH_CMD, target_directory, False)
        print self.get_sha_str(repo_data.default_branch, target_directory)

    def system_exec(self, command, directory=None, show_output=True):
        if not directory:
            directory = self.cwd

        try:
            process = Popen(command, stdout=PIPE, stderr=PIPE, shell=True, cwd=directory)
            (output, error) = process.communicate()

            if show_output:
                print output.strip()
                sys.stdout.flush()

            if process.returncode != 0:
                raise Exception(error)

            return output.strip()

        except Exception as err:
            print Color.RED + "Could not execute", command, err, Color.END
            print "Terminating early"
            exit(1)

    @staticmethod
    def get_color_str(text, color):
        return color + str(text) + Color.END

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Retrieve and/or update local copies of GitHub-hosted repos')

    parser.add_argument('username', \
            help='GitHub username that will be used for cloning and fetching')
    parser.add_argument('token', \
            help='GitHub auth token for that username. \
            You can create one at https://github.com/settings/applications')
    parser.add_argument('--version', \
            action='version', \
            version='%(prog)s v0.7')

    parser.add_argument('-d', '--directory', \
            help='Target directory for cloning and fetching')

    parser.add_argument('-x', '--exclude-own', \
            help='Exclude own repositories in the updates', \
            action='store_true')
    parser.add_argument('--exclude-forks', \
            help='Exclude forked repositories from the updates', \
            action='store_true')
    parser.add_argument('--exclude-orgs', \
            help='Exclude repos that are in user\'s orgs (this does not filter the ones you have)', \
            action='store_true')
    parser.add_argument('--include-org-forks', \
            help='Include forked repos that are in user\'s orgs', \
            action='store_true')
    parser.add_argument('--include-public-org-repos', \
            help='Include public repos that are in user\'s orgs', \
            action='store_true')

    parser.add_argument('--debug', \
            help='Enable debugging output', \
            action='store_true')

    args = AttributeDict(vars(parser.parse_args()))

    RepoUpdater(args).update()
